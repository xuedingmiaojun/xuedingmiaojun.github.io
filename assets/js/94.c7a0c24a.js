(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{381:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("介绍如何在Linux系统使用Docker安装Gitlab、Gitlab-Runner并实现项目的CICD"),s("br")]),t._v(" "),s("h4",{attrs:{id:"一、安装gitlab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、安装gitlab","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、安装Gitlab")]),t._v(" "),s("p",[t._v("1、拉取镜像并启动"),s("br"),t._v("\n由于服务器的80端口可能被占用，所以这里我们改成了其他端口来启动")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker run -d -p 2443:443 -p 5678:80 -p 2222:22 --name gitlab --restart always -v/srv/gitlab/config:/etc/gitlab -v /srv/gitlab/logs:/var/log/gitlab -v /src/gitlab/data:/var/opt/gitlab docker.io/gitlab/gitlab-ce\n")])])]),s("p",[t._v("2、修改配置文件"),s("br"),t._v("\n修改gitlab.yml文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vim /src/gitlab/data/gitlab-rails/etc/gitlab.yml  \n")])])]),s("p",[t._v("找到如下配置，修改host为你服务的IP或者域名(不能加http://)，修改完毕后保存退出"),s("br"),t._v(" "),s("img",{attrs:{src:"https://yqfile.alicdn.com/b0be4c0aa1e419b147f2213e4965c57837f5f0ad.png",alt:"avatar"}})]),t._v(" "),s("p",[t._v("修改gitlab.rb文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vim /srv/gitlab/config/gitlab.rb  \n")])])]),s("p",[t._v("找到external_url，默认是被注释的，要打开，并填写暴露出去的http://ip:port，IP一定要和gitlab.yml文件配置的相同，port为你启动时指定的，我们这里是5678，最后加上ssh协议下使用的IP和端口(这里的端口是你启动时指定的，我们这里是2222)，最后保存并退出"),s("br"),t._v(" "),s("img",{attrs:{src:"https://yqfile.alicdn.com/35ab1ba86ac5fb4ec09e6347d6b4de1d1b32c389.png",alt:"avatar"}})]),t._v(" "),s("p",[t._v("停止并移除之前启动的gitlab")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 停止  \ndocker stop gitlab\n# 移除\ndocker rm gitlab\n")])])]),s("p",[s("strong",[t._v("重新启动gitlab")]),s("br"),t._v("\n这里要将容器端口改为5678")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker run -d -p 2443:443 -p 5678:5678 -p 2222:22 --name gitlab --restart always -v/srv/gitlab/config:/etc/gitlab -v /srv/gitlab/logs:/var/log/gitlab -v /src/gitlab/data:/var/opt/gitlab docker.io/gitlab/gitlab-ce\n")])])]),s("h4",{attrs:{id:"二、安装gitlab-runner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、安装gitlab-runner","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、安装Gitlab-Runner")]),t._v(" "),s("p",[t._v("可以在某个项目里settings --\x3e CICD --\x3e Runner进行配置，也可以在GitLab主设置页安装共享Runner，安装方法都一致")]),t._v(" "),s("p",[t._v("1、拉取Runner镜像并启动")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker run -d --name gitlab-runner --restart always -v /srv/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest  \n")])])]),s("p",[t._v("2、进入Runner容器内")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker exec -it gitlab-runner bash\n")])])]),s("p",[t._v("3、运行以下命令")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("gitlab-runner register\n")])])]),s("p",[t._v("输入Gitlab实例的地址")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\nhttp://xxx\n")])])]),s("p",[t._v("输入token")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Please enter the gitlab-ci token for this runner\nxxx\n")])])]),s("p",[t._v("输入Runner的描述")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Please enter the gitlab-ci description for this runner\n[hostname] my-runner\n")])])]),s("p",[t._v("输入与Runner关联的标签")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Please enter the gitlab-ci tags for this runner (comma separated):\nmy-tag,another-tag\n")])])]),s("p",[t._v("输入Ruuner的执行者")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\ndocker\n")])])]),s("p",[t._v("如果上面执行者为docker，需要你在.gitlab-ci.yml中指定docker版本")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Please enter the Docker image (eg. ruby:2.1):\nalpine:latest\n")])])]),s("p",[t._v("通过以上命令后，就可以在gitlab中查看到了这个刚刚创建的runner")]),t._v(" "),s("p",[t._v("4、修改Runner配置文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vim /srv/gitlab-runner/config/config.toml\n")])])]),s("p",[t._v("找到volumes配置，修改为如下，分别是挂载了宿主机的docker和配置Maven的缓存，提高效率")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[t._v("volumes = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/cache"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/var/run/docker.sock:/var/run/docker.sock"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/.m2/:/.m2/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("在volumes配置下方增加一行配置，防止Runner重复拉取镜像")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[t._v('pull_policy = "if'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("not"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('present"\n')])])]),s("p",[t._v("重启Runner即可")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker restart gitlab-runner\n")])])]),s("h4",{attrs:{id:"三、创建springboot项目测试cicd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、创建springboot项目测试cicd","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、创建SpringBoot项目测试CICD")]),t._v(" "),s("p",[t._v(".gitlab-ci.yml文件")]),t._v(" "),s("p",[t._v("1、在项目根目录创建个Dockerfile")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[t._v("FROM openjdk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("jdk\nCOPY target/*.jar swarm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test.jar\nEXPOSE 8000\nENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-jar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"swarm-test.jar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("2、项目根目录创建.gitlab-ci.yml文件")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为我们Runner执行器设置为docker, 所以这里需要指定docker的版本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("stable\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义三个阶段")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" compile\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" run\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义个变量, 指定maven下载的jar包存放的位置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MAVEN_OPTS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dmaven.repo.local=/.m2"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一阶段")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("compile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打包用到了maven, 所有需要拉取maven镜像, 这是我自己构建的阿里云maven私服的maven镜像")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" registry.cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hangzhou.aliyuncs.com/gjing/maven"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定阶段")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" compile\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行脚本, 使用变量时要用到 $ 符号")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mvn $MAVEN_OPTS clean package "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dmaven.test.skip=true\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只作用在master分支")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建runner时指定的tag")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译后有产物,所以要指定下过期时间和路径, 以供于其他阶段使用")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expire_in")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1 days\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" target/*.jar\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二阶段, 这里不再一一介绍, 和第一阶段差不多")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("t registry.cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hangzhou.aliyuncs.com/gjing/test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("1.0 .\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker login "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("username xxx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("password xxx registry.cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hangzhou.aliyuncs.com\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker push registry.cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hangzhou.aliyuncs.com/gjing/test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" run\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker run "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("d "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("test "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p 8000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8000 registry.cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hangzhou.aliyuncs.com/gjing/test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n")])])]),s("p",[t._v("3、将项目提交到Gitlab仓库即可")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.aliyun.com/article/719968?spm=a2c6h.12873581.0.0.7fa7115eh3IVnp",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文链接"),s("OutboundLink")],1)])])},[],!1,null,null,null);a.default=e.exports}}]);