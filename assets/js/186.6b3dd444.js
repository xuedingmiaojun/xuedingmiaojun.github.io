(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{473:function(e,t,v){"use strict";v.r(t);var r=v(2),a=Object(r.a)({},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("nginx在应用程序中的作用")]),e._v(" "),v("ul",[v("li",[e._v("解决跨域")]),e._v(" "),v("li",[e._v("请求过滤")]),e._v(" "),v("li",[e._v("配置gzip")]),e._v(" "),v("li",[e._v("负载均衡")]),e._v(" "),v("li",[e._v("静态资源服务器"),v("br")])]),e._v(" "),v("h3",{attrs:{id:"正向代理与反向代理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#正向代理与反向代理","aria-hidden":"true"}},[e._v("#")]),e._v(" 正向代理与反向代理")]),e._v(" "),v("p",[e._v("代理")]),e._v(" "),v("ul",[v("li",[e._v("在服务器和客户端之间假设的一层服务器")]),e._v(" "),v("li",[e._v("将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端")])]),e._v(" "),v("img",{staticStyle:{width:"80%",display:"inline-block"},attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190411/fc23695dac8e4fb5b5aca2d02055e99f.png"}}),e._v(" "),v("p",[e._v("::: tip 正向代理")]),e._v(" "),v("ul",[v("li",[e._v("是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。")]),e._v(" "),v("li",[e._v("为我们服务的，即为客户端服务的，客户端可以根据正向代理访问到它本身无法访问到的服务器资源。")]),e._v(" "),v("li",[e._v("对我们是透明的，对服务端是非透明的，即服务端并不知道自己收到的是来自代理的访问还是来自真实客户端的访问。"),v("br"),e._v("\n:::")])]),e._v(" "),v("p",[e._v("::: tip 反向代理")]),e._v(" "),v("ul",[v("li",[e._v("是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。")]),e._v(" "),v("li",[e._v("为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。")]),e._v(" "),v("li",[e._v("对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。"),v("br"),e._v("\n:::")])]),e._v(" "),v("h3",{attrs:{id:"基本配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本配置")]),e._v(" "),v("p",[e._v("nginx配置文件的基本结构"),v("br"),e._v(" "),v("img",{staticStyle:{width:"80%",display:"inline-block"},attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190411/e89cdc7fb29f4e1191160648f4ce3cde.png"}})]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("events { }\nhttp { \n    server { \n        location path { ... } \n        location path { ... } \n    } \n    server { ... }\n}  \n")])])]),v("ul",[v("li",[e._v("main:nginx的全局配置，对全局生效。")]),e._v(" "),v("li",[e._v("events:配置影响nginx服务器或与用户的网络连接。")]),e._v(" "),v("li",[e._v("http：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。")]),e._v(" "),v("li",[e._v("server：配置虚拟主机的相关参数，一个http中可以有多个server。")]),e._v(" "),v("li",[e._v("location：配置请求的路由，以及各种页面的处理情况。")]),e._v(" "),v("li",[e._v("upstream：配置后端服务器具体地址，负载均衡配置不可或缺的部分。")])]),e._v(" "),v("h3",{attrs:{id:"内置变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内置变量","aria-hidden":"true"}},[e._v("#")]),e._v(" 内置变量")]),e._v(" "),v("p",[e._v("下面是nginx一些配置中常用的内置全局变量，你可以在配置的任何位置使用它们。")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("变量名")]),e._v(" "),v("th",[e._v("功能")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("$host")]),e._v(" "),v("td",[e._v("请求信息中的Host，如果请求中没有Host行，则等于设置的服务器名")])]),e._v(" "),v("tr",[v("td",[e._v("$request_method")]),e._v(" "),v("td",[e._v("客户端请求类型，如GET、POST")])]),e._v(" "),v("tr",[v("td",[e._v("$remote_addr")]),e._v(" "),v("td",[e._v("客户端的IP地址")])]),e._v(" "),v("tr",[v("td",[e._v("$args")]),e._v(" "),v("td",[e._v("请求中的参数")])]),e._v(" "),v("tr",[v("td",[e._v("$content_length")]),e._v(" "),v("td",[e._v("请求头中的Content-length字段")])]),e._v(" "),v("tr",[v("td",[e._v("$http_user_agent")]),e._v(" "),v("td",[e._v("客户端agent信息")])]),e._v(" "),v("tr",[v("td",[e._v("$http_cookie")]),e._v(" "),v("td",[e._v("客户端cookie信息")])]),e._v(" "),v("tr",[v("td",[e._v("$remote_addr")]),e._v(" "),v("td",[e._v("客户端的IP地址")])]),e._v(" "),v("tr",[v("td",[e._v("$remote_port")]),e._v(" "),v("td",[e._v("客户端的端口")])]),e._v(" "),v("tr",[v("td",[e._v("$server_protocol")]),e._v(" "),v("td",[e._v("请求使用的协议，如HTTP/1.0、·HTTP/1.1`")])]),e._v(" "),v("tr",[v("td",[e._v("$server_addr")]),e._v(" "),v("td",[e._v("服务器地址")])]),e._v(" "),v("tr",[v("td",[e._v("$server_name")]),e._v(" "),v("td",[e._v("服务器名称")])]),e._v(" "),v("tr",[v("td",[e._v("$server_port")]),e._v(" "),v("td",[e._v("服务器的端口号")])])])]),e._v(" "),v("h3",{attrs:{id:"解决跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域","aria-hidden":"true"}},[e._v("#")]),e._v(" 解决跨域")]),e._v(" "),v("p",[e._v("跨域的定义"),v("br"),e._v("\n同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。通常不允许不同源间的读操作。")]),e._v(" "),v("p",[e._v("同源的定义"),v("br"),e._v("\n如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。")]),e._v(" "),v("p",[e._v("nginx解决跨域的原理")]),e._v(" "),v("p",[e._v("例如：")]),e._v(" "),v("p",[e._v("前端server的域名为：fe.server.com"),v("br"),e._v("\n后端服务的域名为：dev.server.com"),v("br"),e._v("\n现在我在fe.server.com对dev.server.com发起请求一定会出现跨域。")]),e._v(" "),v("p",[e._v("现在我们只需要启动一个nginx服务器，将server_name设置为fe.server.com,然后设置相应的location以拦截前端需要跨域的请求，最后将请求代理回dev.server.com。如下面的配置：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("server { \n    listen 80; \n    server_name fe.server.com; \n    location / { \n        proxy_pass dev.server.com; \n    } \n}  \n")])])]),v("p",[e._v("这样可以完美绕过浏览器的同源策略："),v("br"),e._v("\nfe.server.com访问nginx的fe.server.com属于同源访问，而nginx对服务端转发的请求不会触发浏览器的同源策略。")]),e._v(" "),v("h3",{attrs:{id:"请求过滤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请求过滤","aria-hidden":"true"}},[e._v("#")]),e._v(" 请求过滤")]),e._v(" "),v("p",[v("em",[v("strong",[e._v("根据状态码过滤")])])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("error_page 500 501 502 503 504 506 /50x.html; \nlocation = /50x.html \n{ \n    #将跟路径改编为存放html的路径。 \n    root /root/static/html; \n}\n")])])]),v("p",[e._v("根据URL名称过滤，精准匹配URL，不匹配的URL全部重定向到主页。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("location / { rewrite ^.*$ /index.html redirect; }\n")])])]),v("p",[v("em",[v("strong",[e._v("根据请求类型过滤")])])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("if ( $request_method !~ ^(GET|POST|HEAD)$ ) { return 403; }\n")])])]),v("h3",{attrs:{id:"配置gzip"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置gzip","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置gzip")]),e._v(" "),v("p",[e._v("对于文本文件，GZip 的效果非常明显，开启后传输所需流量大约会降至 1/4 ~ 1/3。"),v("br"),e._v("\n启用gzip同时需要客户端和服务端的支持，如果客户端支持gzip的解析，那么只要服务端能够返回gzip的文件就可以启用gzip了,我们可以通过nginx的配置来让服务端支持gzip。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("gzip on; \ngzip_http_version 1.1; \ngzip_comp_level 5; \ngzip_min_length 1000; \ngzip_types text/csv text/xml text/css text/plain text/java application/java application/x-java application/json application/xml;\n")])])]),v("p",[v("em",[v("strong",[e._v("gzip")])])]),e._v(" "),v("ul",[v("li",[e._v("开启或者关闭gzip模块")]),e._v(" "),v("li",[e._v("默认值为 off")]),e._v(" "),v("li",[e._v("可配置为 on / off")])]),e._v(" "),v("p",[v("em",[v("strong",[e._v("gzip_http_version")])])]),e._v(" "),v("ul",[v("li",[e._v("启用 GZip 所需的 HTTP 最低版本")]),e._v(" "),v("li",[e._v("默认值为 HTTP/1.1")])]),e._v(" "),v("p",[v("em",[v("strong",[e._v("gzip_comp_level")])])]),e._v(" "),v("ul",[v("li",[e._v("压缩级别，级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu）。")]),e._v(" "),v("li",[e._v("默认值为 1")]),e._v(" "),v("li",[e._v("压缩级别取值为1-9")])]),e._v(" "),v("p",[v("em",[v("strong",[e._v("gzip_min_length")])])]),e._v(" "),v("ul",[v("li",[e._v("设置允许压缩的页面最小字节数，Content-Length小于该值的请求将不会被压缩")]),e._v(" "),v("li",[e._v("默认值:0")]),e._v(" "),v("li",[e._v("当设置的值较小时，压缩后的长度可能比原文件大，建议设置1000以上")])]),e._v(" "),v("p",[v("em",[v("strong",[e._v("gzip_types")])])]),e._v(" "),v("ul",[v("li",[e._v("要采用gzip压缩的文件类型(MIME类型)")]),e._v(" "),v("li",[e._v("默认值:text/html(默认不压缩js/css)")])]),e._v(" "),v("h3",{attrs:{id:"负载均衡"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡","aria-hidden":"true"}},[e._v("#")]),e._v(" 负载均衡")]),e._v(" "),v("p",[e._v("用来帮助我们将众多的客户端请求合理的分配到各个服务器，以达到服务端资源的充分利用和更少的请求时间")]),e._v(" "),v("p",[v("em",[v("strong",[e._v("如何实现")])]),v("br"),e._v("\nUpstream指定后端服务器地址列表")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("upstream balanceServer { \n    server 10.1.22.33:12345; \n    server 10.1.22.34:12345; \n    server 10.1.22.35:12345; \n}\n")])])]),v("p",[e._v("在server中拦截响应请求，并将请求转发到Upstream中配置的服务器列表。")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("server { \n    server_name fe.server.com; \n    listen 80; l\n    ocation /api { \n        proxy_pass http://balanceServer; \n    } \n}\n")])])]),v("p",[v("em",[v("strong",[e._v("指定分配策略")])])]),e._v(" "),v("ul",[v("li",[e._v("轮询策略"),v("br"),e._v("\n默认策略:将所有客户端请求轮询分配给服务端,某一台服务器压力太大会出现延迟影响本台机器所服务的用户")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("upstream balanceServer { \n    server 10.1.22.33:12345; \n    server 10.1.22.34:12345; \n    server 10.1.22.35:12345; \n}\n")])])]),v("ul",[v("li",[v("p",[e._v("最小连接数策略"),v("br"),e._v("\n请求优先分配给压力较小的服务器，它可以平衡每个队列的长度，并避免向压力大的服务器添加更多的请求")])]),e._v(" "),v("li",[v("p",[e._v("最快响应时间策略"),v("br"),e._v("\n依赖于NGINX Plus，优先分配给响应时间最短的服务器。")])])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("upstream balanceServer { \n    fair; \n    server 10.1.22.33:12345; \n    server 10.1.22.34:12345; \n    server 10.1.22.35:12345;\n}\n")])])]),v("ul",[v("li",[e._v("客户端ip绑定"),v("br"),e._v("\n同一个ip的请求永远只分配一台服务器，有效解决了动态网页存在的session共享问题")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("upstream balanceServer { \n    ip_hash; \n    server 10.1.22.33:12345; \n    server 10.1.22.34:12345; \n    server 10.1.22.35:12345;\n}\n")])])]),v("ul",[v("li",[e._v("静态资源服务器")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("location ~* \\.(png|gif|jpg|jpeg)$ { \n    root /root/static/; \n    autoindex on; \n    access_log off; \n    expires 10h;# 设置过期时间为10小时 \n}\n\n")])])]),v("p",[e._v("匹配以png|gif|jpg|jpeg为结尾的请求，并将请求转发到本地路径，root中指定的路径即nginx本地路径。同时也可以进行一些缓存的设置。")]),e._v(" "),v("p",[e._v("转自：https://segmentfault.com/a/1190000018454271")])])},[],!1,null,null,null);t.default=a.exports}}]);